architectury {
	platformSetupLoomIde()
	fabric()
}

base {
	archivesName = "${mod_name}-${project.name}-${minecraft_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/agricraft-fabric.accesswidener")
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
	modApi "net.fabricmc.fabric-api:fabric-api:$fabric_version"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

	modApi "com.terraformersmc:modmenu:$modmenu_version"

//	modCompileOnly "mezz.jei:jei-$minecraft_version-fabric-api:$jei_version"
//	modRuntimeOnly "mezz.jei:jei-$minecraft_version-fabric:$jei_version"

	modLocalRuntime "dev.emi:emi-fabric:$emi_version"

	modImplementation "curse.maven:jade-324717:4978962"

	//	modRuntimeOnly "curse.maven:fabric-seasons-413523:4699698"  // Fabric Seasons 2.3
	//	modCompileOnly "curse.maven:fabric-seasons-413523:4699698"  // Fabric Seasons 2.3
}

sourceSets {
	main {
		resources {
			srcDirs += project(":neoforge").file("src/generated/resources").absolutePath
			exclude '.cache'
		}
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set null
}

sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

