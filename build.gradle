// ForgeGradle Buildscript
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

// Load Properties
Properties mod = new Properties()
mod.load(new FileInputStream("${project.rootDir}/mod.properties"))

sourceCompatibility = mod.version_java
targetCompatibility = mod.version_java
version = "${mod.version_major}.${mod.version_minor}.${mod.version_patch}"
mod.version = version
group = "${mod.group}.${mod.id}"
archivesBaseName = mod.id

minecraft {
    version = "${mod.version_minecraft}-${mod.version_forge}"
    mappings = mod.version_mappings
    runDir = "/run/${mod.version_minecraft}"
    makeObfSourceJar = false
	useDepAts = true

	// Replace mod information in reference class.
	replaceIn mod.reference_class
    mod.each { prop ->
		replace "\${mod.${prop.key}}", prop.value
		replace "/*^", "\""
		replace "^*/", "\"; // Default:"
    }
}

task modInfo() {
	println ""
	println "#################################################"
	println "	Quikmod"
	println "#################################################"

	// Verify mod id follows proper conventions.
	assert mod.id == mod.id.toLowerCase();
	assert mod.id == mod.id.replace(' ', '');
	assert mod.id == mod.id.replace('.', '');

	// Verify mod group follows proper conventions.
	assert mod.group == mod.group.toLowerCase();
	assert mod.group == mod.group.replace(' ', '');

	// Print Gradle Information
	println ":" + "version_gradle".padRight(20) + " = " + GradleVersion.current().version

	// Print Information Tokens
	mod.each { prop ->
        println ":" + prop.key.padRight(20) + " = " + prop.value
    }

	println "#################################################"
	println ""
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven/"
    }
    maven {
        name = "sponge"
        url = "http://repo.spongepowered.org/maven/"
    }
	maven {
        name = "sk89q"
        url = "http://maven.sk89q.com/repo/"
    }
	maven {
		name = "JEI"
		url "http://dvs1.progwml6.com/files/maven"
	}
}

dependencies {
    // Mods (For auto-import)
    //compile "codechicken:CodeChickenLib:1.8-1.1.2.139:dev"
    //compile "codechicken:CodeChickenCore:1.8-1.0.5.34:dev"
    //compile "codechicken:NotEnoughItems:1.8-1.0.5.82:dev"
	compile project(':lib/AgriCore')
    //compile "mcp.mobius.waila:Waila:1.7.0-B2_1.9:dev"
	deobfCompile "mezz.jei:jei_1.10:3.7.0.218"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
    }
}

// Javadoc
task mainJavadoc(type: Javadoc) {
	source = sourceSets.main.allJava
	title = "AgriCraft ${mod.version} Documentation"
	destinationDir = file("${project.docsDir}/mainJavadoc")
	failOnError = false
}

task apiJavadoc(type: Javadoc) {
	source = sourceSets.main.allJava
	include "**/api/**"
	title = "AgriCraft ${mod.version} API Documentation"
	destinationDir = file("${project.docsDir}/apiJavadoc")
	failOnError = false
}

// Jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: mainJavadoc) {
    classifier = 'javadoc'
    from "${project.docsDir}/mainJavadoc"
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include "${mod.group.replace('.', '/')}/${mod.id}/api/**/*"
    classifier = 'api'
}

// Tell build that it needs the API compiled first.
build.dependsOn apiJar

// Collate distribution files.
task dist(dependsOn: ['build', 'sourcesJar', 'javadocJar']) {
	description "Generate the dist folder."
	doLast{
		delete "${projectDir}/dist"
		copy {
			from "${buildDir}/libs"
			into "${projectDir}/dist"
		}
	}
}

// Run Stuff
runClient {
	if( project.hasProperty('minecraft_username') && project.hasProperty('minecraft_password') ) {
		args "--username=${project.minecraft_username}"
		args "--password=${project.minecraft_password}"
	}

}
