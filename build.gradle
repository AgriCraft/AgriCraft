// ====================================================================================================================
// AgriCraft Buildscript
// --------------------------------------------------------------------------------------------------------------------
// Now without QuikMod.
// ====================================================================================================================

// --------------------------------------------------------------------------------------------------------------------
// Buildscript Dependencies
// --------------------------------------------------------------------------------------------------------------------

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

// --------------------------------------------------------------------------------------------------------------------
// ForgeGradle Plugin
// --------------------------------------------------------------------------------------------------------------------
apply plugin: 'net.minecraftforge.gradle'

// --------------------------------------------------------------------------------------------------------------------
// Buildscript Plugins
// --------------------------------------------------------------------------------------------------------------------
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

// --------------------------------------------------------------------------------------------------------------------
// Mod Properties
// --------------------------------------------------------------------------------------------------------------------

// Load Mod Properties
ext.configFile = file('mod.properties')
ext.config = parseConfig(configFile)

// Mod Properties Transcription
version = "${config.version_major}.${config.version_minor}.${config.version_patch}"
group = "${config.package}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.id

// Set the source and target compatibility levels.
// Required for eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "${config.version_java}"

// Mod Properties Loader
def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

// --------------------------------------------------------------------------------------------------------------------
// Minecraft Task
// --------------------------------------------------------------------------------------------------------------------
minecraft {
 mappings channel: "${config.mapping_channel}", version: "${config.mapping_version}"
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                agricraft {
                    source sourceSets.main
                }
                infinitylib {
                    //This still grabs the sourceSets from the main project, therefore one must manually correct it in runClient afterwards
                    source project(":InfinityLib").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                agricraft {
                    source sourceSets.main
                }
                infinitylib {
                    //This still grabs the sourceSets from the main project, therefore one must manually correct it in runServer afterwards
                    source project(":InfinityLib").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'agricraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                agricraft {
                    source sourceSets.main
                }
                infinitylib {
                    //This still grabs the sourceSets from the main project, therefore one must manually correct it in runServer afterwards
                    source project(":InfinityLib").sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // for JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
}

// List Deps.
dependencies {
	// Minecraft
    minecraft "net.minecraftforge:forge:${config.version_minecraft}-${config.version_forge}"
	
    // AgriCore
    compile project(':AgriCore');
    
    // InfinityLib
    compile project(':InfinityLib')

	//JEI
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.58:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.58")
}

// Delete Old Plants
task deleteOldJsons(type: Delete) {
    delete "run/config/agricraft/json"
}

subprojects { Project subProject ->
    task copyArtifacts {
        doLast {
            def baseName = subProject.archivesBaseName
            def version = subProject.version
            def group = subProject.group
            def TO_DIR = "${rootDir}/run/mods"
            def FROM_DIR = "${buildDir}/libs"

            ant.mkdir(dir: TO_DIR)
            ant.copy(todir: TO_DIR) {
                fileset(dir: FROM_DIR,
                includes: "${baseName}*${version}*.jar")
            }
        }
    }

    afterEvaluate {
        def jarTask = subProject.tasks.find { it.name == 'jar' }
        if (jarTask) { 
            jarTask.finalizedBy(copyArtifacts)
        }
    }
}

processResources {
	// Add AgriPlants
    from('lib/AgriPlants') {
        include '**/*.json'
        into 'json/defaults'
    }
    outputs.upToDateWhen{ false }
	
	// make sure to include mods.toml from the main mod
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }

    // from the main mod, copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', '**/psd/**'
    }
    /*
    // make sure to include mods.toml from infinitylib
    from(sourceSets.infinitylib.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }
    */

    // from InfinityLib, copy everything else, thats not the mods.toml
    //from(sourceSets.infinitylib.resources.srcDirs) {
        //exclude 'META-INF/mods.toml', '**/psd/**'
    //}
}

// Fix Shading
jar {
    archiveName = "${baseName} ${version}.${extension}"
    manifest {
        attributes([
                "Specification-Title"     : "${config.id}",
                "Specification-Vendor"    : "${config.author}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "${config.name}",
                "Implementation-Version"  : "${config.version_major}.${config.version_minor}.${config.version_patch}",
                "Implementation-Vendor"   : "${config.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    /*
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
            exclude 'com/google', 'com/google/**'
            exclude 'net/jcip', 'net/jcip/**'
            exclude 'edu/umd', 'edu/umd/**'
            exclude 'javassist', 'javassist/**'
            exclude 'javax/annotation', 'javax/annotation/**'
        }
    }
    */
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled false
    }
}
