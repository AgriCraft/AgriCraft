// Retrieve plugins for gradle.
buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

// Setup required project resources.
repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name "Squeek"
        url "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name "MineTweaker3"
        artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-[revision].[ext]"
    }
}

apply plugin: 'forge'
apply plugin: 'java'
apply from: 'automation.gradle'

// Set build properties.
sourceCompatibility = version_java
targetCompatibility = version_java
ext.version_mod = "${version_mod_major}.${version_mod_minor}.${version_mod_revis}"
version = "${version_minecraft}-${version_mod}"
group = "com.InfinityRaider.AgriCraft"
archivesBaseName = "AgriCraft"

// Setup forge.
minecraft {
    version = "${version_minecraft}-${version_forge}-${version_minecraft}"
    runDir = "eclipse"
    replaceIn "reference/Reference.java"
    replace "@MAJOR@", version_mod_major
    replace "@MINOR@", version_mod_minor
    replace "@REVIS@", version_mod_revis
}

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
    // Code Chicken
    compile "codechicken:CodeChickenLib:${version_codeChickenLib}:dev"
    compile "codechicken:CodeChickenCore:${version_codeChickenCore}:dev"
    compile "codechicken:NotEnoughItems:${version_nei}:dev"
    compile "codechicken:ForgeMultipart:${version_forgeMultiPart}:dev"

    // Core
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev"
    compile name: 'MineTweaker3', version: version_minetweaker, ext: 'jar'

    // API
    compile "applecore:AppleCore:${version_applecore}:api"
}

// Configure Resource Processing.
processResources {
    inputs.property "version", project.version_mod
    inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand ([
               'version': project.version_mod,
               'mcversion': project.minecraft.version
        ])
    }
    // Don't ask me why this can't go in the other from...
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Compile the jar for the APIs
task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/InfinityRaider/AgriCraft/api/**/*'
    classifier = 'api'
}

//Compile sources jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

//Compile deobf jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

// Tell build that it needs the API, sources jar and deobf jar compiled first.
build.dependsOn apiJar, sourceJar, deobfJar

// Javadoc
task mainAgriCraftJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
  title = "AgriCraft ${version_mod} Documentation"
  destinationDir = file("${project.docsDir}/mainJavadoc")
  failOnError = false
}

task apiAgriCraftJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
  include "**/api/**"
  title = "AgriCraft ${version_mod} API Documentation"
  destinationDir = file("${project.docsDir}/apiJavadoc")
  failOnError = false
}
