// Retrieve plugins for gradle.
buildscript {
    repositories {
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

// Setup required project resources.
repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name "Squeek"
        url "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name "MineTweaker3"
        artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-[revision].[ext]"
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'
apply plugin: 'java'

// Set build properties.
sourceCompatibility = version_java
targetCompatibility = version_java
ext.version_mod = "${version_mod_major}.${version_mod_minor}.${version_mod_revis}"
version = "${version_minecraft}-${version_mod}-${version_minecraft}"
group = "com.InfinityRaider.AgriCraft"
archivesBaseName = "AgriCraft"

// Setup forge.
minecraft {
    version = "${version_minecraft}-${version_forge}-${version_minecraft}"
    runDir = "eclipse"
    replaceIn "reference/Reference.java"
    replace "@MAJOR@", version_mod_major
    replace "@MINOR@", version_mod_minor
    replace "@REVIS@", version_mod_revis
}

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
    // Code Chicken
    compile "codechicken:CodeChickenLib:${version_codeChickenLib}:dev"
    compile "codechicken:CodeChickenCore:${version_codeChickenCore}:dev"
    compile "codechicken:NotEnoughItems:${version_nei}:dev"

    // Core
    compile "mcp.mobius.waila:Waila:1.5.9_1.7.10:dev"
    compile name: 'MineTweaker3', version: version_minetweaker, ext: 'jar'

    // API
    compile "applecore:AppleCore:${version_applecore}:api"
}

// Configure Travis auto-build info.
allprojects {
    if (System.getenv("TRAVIS") != null) {
        def tag = System.getenv("TRAVIS_TAG");
        if (tag != null && !tag.isEmpty()) {
            project.ext.releaseType = tag.contains("SNAPSHOT") ? "alpha" : "release"
            version += tag.contains("SNAPSHOT") ? "-b${System.getenv("TRAVIS_BUILD_NUMBER")}" : ""
        } else {
            version += "-b${System.getenv("TRAVIS_BUILD_NUMBER")}"
            project.ext.releaseType = "alpha"
        }
    }
}

// Configure Resource Processing.
processResources {
    inputs.property "version", project.version_mod
    inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand ([
               'version': project.version_mod,
               'mcversion': project.minecraft.version
        ])
    }
    // Don't ask me why this can't go in the other from...
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Release to Curse from Travis.
curse {
    onlyIf {
        (!System.env.TRAVIS_TAG.isEmpty() || getCommitMsg.commitMsg().contains("[cf push]")) && System.env.CFKEY != null
    }

    apiKey = System.env.CFKEY
    projectId = "225635"
    changelog = """
            See https://github.com/InfinityRaider/AgriCraft/blob/master/src/main/resources/changelog.txt
    """
    releaseType = project.hasProperty('releaseType') ? project.releaseType : ""
}

// Retrieve the commit message from git.
task getCommitMsg(type: Exec) {
    def commit = System.env.TRAVIS_COMMIT != null ? System.env.TRAVIS_COMMIT : ""
    commandLine "git log --format=%B -n 1 ${commit}".split(' ')
    standardOutput = new ByteArrayOutputStream()
    ext.commitMsg = {
        return standardOutput.toString()
    }
}

// Tell the Curse task it needs the commit message.
curse.dependsOn getCommitMsg

// Compile the jar for the API
task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/InfinityRaider/AgriCraft/api/**/*'
    classifier = 'api'
}

// Tell build that it needs the API compiled first.
build.dependsOn apiJar
