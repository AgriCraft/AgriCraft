architectury {
	platformSetupLoomIde()
	forge()
}

base {
	archivesName = "${mod_name}-${project.name}-${minecraft_version}"
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfigs = [
				"agricraft-common.mixins.json"
		]
	}
	runs {
		data {
			data()
			programArgs "--all", "--mod", "${mod_id}"
			programArgs "--output", file("src/generated/resources").absolutePath
			programArgs "--existing", project(":common").file("src/main/resources").absolutePath
			programArgs "--existing-mod", "biomesoplenty"
			programArgs "--existing-mod", "pamhc2crops"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += project(":forge").file("src/generated/resources").absolutePath
			exclude '.cache'
		}
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge "net.minecraftforge:forge:$minecraft_version-$forge_version"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	modCompileOnly "mezz.jei:jei-$minecraft_version-forge-api:$jei_version"
	modLocalRuntime("mezz.jei:jei-$minecraft_version-forge:$jei_version") { transitive = false }

	//modCompileOnly "curse.maven:jade-324717:4980189"  // Jade-1.20.4-forge-13.2.1-api
	//modLocalRuntime "curse.maven:jade-324717:4978952"  // Jade-1.20.4-forge-13.2.1
	modImplementation "curse.maven:jade-324717:$jade_forge_version"

	modImplementation "curse.maven:biomesoplenty-220318:4617259"  // Biomes O' Plenty 1.20.1-18.0.0.592
	modImplementation "curse.maven:terrablender-563928:5378180"  // TerraBlender Forge 1.20.1-3.0.1.7
	modImplementation "curse.maven:pamhc2crops-361385:4687624"  // pamhc2crops 1.20-1.0.3
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set null
	atAccessWideners.add "agricraft.accesswidener"
}

sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
