architectury {
	platformSetupLoomIde()
	forge()
}

base {
	archivesName = "${mod_name}-${project.name}-${minecraft_version}"
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
	}
}

sourceSets {
	main {
		resources {
			srcDirs += project(":neoforge").file("src/generated/resources").absolutePath
			exclude '.cache'
		}
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge "net.minecraftforge:forge:$minecraft_version-$forge_version"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	modCompileOnly "mezz.jei:jei-$minecraft_version-forge-api:$jei_version"
	modLocalRuntime("mezz.jei:jei-$minecraft_version-forge:$jei_version") { transitive = false }

    modImplementation "curse.maven:jade-324717:4978952"

//	modLocalRuntime "curse.maven:serene-seasons-291874:5073504"  // Serene Seasons 1.20.4-9.3.0.17
//	modLocalRuntime "curse.maven:glitchcore-955399:5088441"  // GlitchCore 1.20.4-1.0.0.59 (serene season dep)
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set null
	atAccessWideners.add "agricraft.accesswidener"
}

sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
